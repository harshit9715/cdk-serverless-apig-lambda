name: CI + CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  DeployStage:
    runs-on: ubuntu-latest
#     environment: 
#       name: Staging
    steps:
      - uses: actions/checkout@v2
      
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '14.x'
      - name: Cache Node.js modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-
            ${{ runner.OS }}-
      
      # Install project dependencies
      - name: Install NPM modules and Build project
        run: |
          npm i
          rm -rf cdk.out
          npm run build
      
      - name: Install CDK
        run: sudo npm install -g aws-cdk
      # Synthesize the CDK stack, which, as you’ll recall, 
      # requires AWS credentials to perform a Route53 HostedZone lookup. 
      # We want to synthesize the CDK stack every time we push a change, 
      # as this is a good way of determining if there’s an issue with our CDK: 
      # some errors won’t be apparent until you try to synthesize them.
      - name: CDK synth
        run: |
          cdk synth
          
      - uses: actions/upload-artifact@v2
        with:
          name: cdk-artifact
          path: cdk.out
          retention-days: 5

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-skip-session-tagging: true
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{secrets.AWS_REGION}}
          role-to-assume: ${{secrets.AWS_ROLE_TO_ASSUME}}
          role-external-id: ${{ secrets.AWS_ROLE_EXTERNAL_ID }}
          role-duration-seconds: 1200
          role-session-name: ec2-cdk-session
        
      - name: Deploy CDK
        run: | 
          npm i
          rm -rf cdk.out
          npm run build
          #cdk bootstrap 
          #cdk deploy --app ./cdk.out --require-approval never "*"
          #cdk destroy
      - name: Send mail
        # if: success()
        if: always()
        uses: dawidd6/action-send-mail@v2
        with:
          server_address: email-smtp.ap-south-1.amazonaws.com
          server_port: 587
          username: ${{secrets.MAIL_USERNAME}}
          password: ${{secrets.MAIL_PASSWORD}}
          subject: Deploy CDK App to Prod ?
          # Literal body:
          body: |
            <!DOCTYPE html>
            <html>
            <head>
            <title></title>
            <script type="text/javascript">
              function deployProd() {
              fetch('https://api.github.com/repos/harshit9715/cdk-serverless-apig-lambda/dispatches', {
                    method: 'POST',
                    headers: new Headers({
                        'Authorization': 'token '+ '{{ secrets.PERSONAL_TOKEN }}',
                        'Accept': 'application/vnd.github.everest-preview+json'
                    }),
                    body: JSON.stringify({event_type:"deploy-prod", client_payload:{ "text": "a title"}})
                })
              .then(function(message){
                alert("mail sent successfully")
              });
              }
            </script>
            </head>
            <body>
            <h2>Stage deployment successful!</h2>
            <form method="post">
              <input type="button" value="Deploy to Production?" onclick="deployProd()"/>
            </form>  
            </body>
            </html>
          # Read file contents as body:
          # body: file://README.md
          to: harshit9715@gmail.com
          from: 'Harshit Gupta <harshit.gupta@atmecs.com>'
          # <user@example.com>
          # Optional carbon copy recipients
          # cc: kyloren@example.com,leia@example.com
          # Optional blind carbon copy recipients
          # bcc: r2d2@example.com,hansolo@example.com
          # Optional recipient of the email response
          # reply_to: luke@example.com
          # Optional unsigned/invalid certificates allowance:
          ignore_cert: true
          # Optional content type (defaults to text/plain):
          content_type: text/html
          # Optional converting Markdown to HTML (set content_type to text/html too):
          convert_markdown: false
          # Optional attachments:
          # attachments: attachments.zip,git.diff,./dist/static/main.js
    env:
      password: ${{ secrets.PASSWORD }}
      SIGNALFX_ENDPOINT_URL: ${{ secrets.SIGNALFX_ENDPOINT_URL }}
      SIGNALFX_METRICS_URL: ${{ secrets.SIGNALFX_METRICS_URL }}
      SIGNALFX_ACCESS_TOKEN: ${{ secrets.SIGNALFX_ACCESS_TOKEN }}