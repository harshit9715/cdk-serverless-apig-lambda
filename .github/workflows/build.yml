# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ec2-linux

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-skip-session-tagging: true
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1
          role-to-assume: ${{secrets.AWS_ROLE_TO_ASSUME}}
          role-external-id: ${{ secrets.AWS_ROLE_EXTERNAL_ID }}
          role-duration-seconds: 1200
          role-session-name: ec2-cdk-session
      
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '14.x'
      - name: Cache Node.js modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-
            ${{ runner.OS }}-
      - name: Install CDK
        run: |
          npm install -g aws-cdk
      
      # Install project dependencies
      - name: Install NPM modules and Build project
        run: |
          npm i
          npm run build
          
      # Synthesize the CDK stack, which, as you’ll recall, 
      # requires AWS credentials to perform a Route53 HostedZone lookup. 
      # We want to synthesize the CDK stack every time we push a change, 
      # as this is a good way of determining if there’s an issue with our CDK: 
      # some errors won’t be apparent until you try to synthesize them.
      - name: CDK synth
        env:
          AWS_REGION: 'ap-south-1'
          AWS_TARGET_ACCOUNT: '455180012233'
        run: |
          # Technically this should be a secret.
          echo "deployment account : ${AWS_TARGET_ACCOUNT}" 
          echo "deployment region : ${AWS_REGION}"
          
          cdk synth -region ${AWS_REGION} -targetAccount ${AWS_TARGET_ACCOUNT}
      
      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!
      
      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
      - name: Deploy CDK
        run: |
          cdk deploy --app ./build/cdk.out --require-approval never "*"
        if: github.ref == 'refs/heads/main'
